
import React, { useState } from 'react';
import { useShell } from '../contexts/ShellContext';

const AddAppWindow: React.FC = () => {
  const { dispatch, t } = useShell();
  const [appName, setAppName] = useState('');
  const [prompt, setPrompt] = useState('');
  const [selectedIcon, setSelectedIcon] = useState('📱');
  const [isGenerating, setIsGenerating] = useState(false);

  const availableIcons = [
    '📱', '💻', '⚙️', '🎨', '📝', '🧮', '🎵', '📷',
    '🌐', '📧', '📅', '⏰', '🎮', '📊', '🔧', '📦'
  ];

  const handleSubmit = async () => {
    if (!appName.trim() || !prompt.trim()) return;

    setIsGenerating(true);

    try {
      // For now, create a simple HTML app
      // In a real implementation, this would call an AI API
      const simpleApp = `
        <div style="padding: 20px; color: white; font-family: system-ui;">
          <h2>${appName}</h2>
          <p>Generated from prompt: "${prompt}"</p>
          <p>This is a placeholder app. In the full implementation, this would be generated by AI.</p>
        </div>
      `;

      const newApp = {
        id: `app-${Date.now()}`,
        name: appName,
        icon: selectedIcon,
        code: simpleApp,
        prompt: prompt,
        position: { x: 50, y: 150 }
      };

      dispatch({ type: 'ADD_APP', payload: newApp });
      dispatch({ type: 'CLOSE_WINDOW', payload: 'add-app' });

      // Reset form
      setAppName('');
      setPrompt('');
      setSelectedIcon('📱');
    } catch (error) {
      console.error('Failed to generate app:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <div className="p-6 text-white space-y-6">
      <h2 className="text-2xl font-bold mb-6">{t('add_app')}</h2>

      {/* App Name */}
      <div className="space-y-2">
        <label className="block text-sm font-medium">App Name</label>
        <input
          type="text"
          value={appName}
          onChange={(e) => setAppName(e.target.value)}
          className="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 text-white placeholder-white/50"
          placeholder="Enter app name..."
        />
      </div>

      {/* Icon Selection */}
      <div className="space-y-3">
        <label className="block text-sm font-medium">Choose Icon</label>
        <div className="grid grid-cols-8 gap-2">
          {availableIcons.map(icon => (
            <button
              key={icon}
              className={`w-10 h-10 text-lg rounded-lg transition-all ${
                selectedIcon === icon 
                  ? 'bg-blue-500 scale-110' 
                  : 'bg-white/10 hover:bg-white/20'
              }`}
              onClick={() => setSelectedIcon(icon)}
            >
              {icon}
            </button>
          ))}
        </div>
      </div>

      {/* AI Prompt */}
      <div className="space-y-2">
        <label className="block text-sm font-medium">AI Prompt</label>
        <textarea
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          className="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 text-white placeholder-white/50 h-32 resize-none"
          placeholder="Describe the app you want to create..."
        />
      </div>

      {/* Generate Button */}
      <button
        onClick={handleSubmit}
        disabled={!appName.trim() || !prompt.trim() || isGenerating}
        className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white py-3 px-4 rounded-lg transition-colors font-medium"
      >
        {isGenerating ? 'Generating...' : 'Generate App'}
      </button>

      {/* Info */}
      <div className="text-xs text-white/70 bg-white/5 rounded-lg p-3">
        💡 In the full version, this will use AI APIs to generate functional HTML/JS applications based on your prompt.
      </div>
    </div>
  );
};

export default AddAppWindow;
